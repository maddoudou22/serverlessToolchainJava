version: 0.2

env:
  variables:
      EFS_DIR: "/opt/sonar"
      EFS_DNS: "fs-98eb7a50.efs.eu-west-1.amazonaws.com"
      
phases:
  pre_build:
    commands:
      - echo Pre-Build started on `date`
      - whoami
      - users
      - mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $EFS_DNS:/ $EFS_DIR
      - ls -l /opt/sonar/
#      - chown -R ubuntu:ubuntu /opt/sonar
      - /opt/sonar/sonarqube-7.3/bin/linux-x86-64/sonar.sh start
      - service docker start
      - echo Logging in to Amazon ECR...
      - $(aws ecr get-login --no-include-email --region $AWS_REGION)
      - docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$PACKAGE_VERSION || true &
            
  build:
    commands:
      - echo Build started on `date`
      - pip install --upgrade awscli
      - mvn -T 1C -Dmaven.test.skip=true clean package
      - mvn -T 1C test
      - mvn dependency-check:check
      - timeout 60 sh -c 'until ps aux | grep [o]rg.sonar.ce.app.CeServer; do sleep 1; done'
      - mvn sonar:sonar
      - du -sh /root/.m2/
      - ls .
      - ls target/
      - echo Get project name and version from the pom.xml...
      - apt-get install libxml2-utils -y
      - PACKAGE_VERSION=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" pom.xml)
      - APPLICATION_NAME=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='artifactId']/text()" pom.xml)
      - cp target/$APPLICATION_NAME-$PACKAGE_VERSION.jar .
      
  post_build:
    commands:
      - echo Post-Build started on `date`
      - cat /opt/sonar/sonarqube-7.3/logs/sonar.log
      - echo Building the Docker image...
      - docker build --cache-from $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:PACKAGE_VERSION --build-arg PACKAGE_VERSION=$PACKAGE_VERSION --build-arg APPLICATION_NAME=$APPLICATION_NAME -t $IMAGE_REPO_NAME:$PACKAGE_VERSION .
      - docker tag $IMAGE_REPO_NAME:$PACKAGE_VERSION $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$PACKAGE_VERSION     
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$PACKAGE_VERSION
      - echo Writing image definitions file...
      - printf '[{"name":"%s","imageUri":"%s"}]' $IMAGE_REPO_NAME $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$PACKAGE_VERSION > imagedefinitions.json
      
      
cache:
  paths:
    - '/root/.m2/**/*'
    
artifacts:
    files: imagedefinitions.json